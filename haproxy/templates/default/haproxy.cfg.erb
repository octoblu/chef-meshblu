global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  #log loghost    local0 info
  maxconn <%= node[:haproxy][:global_max_connections] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  <% if node[:haproxy][:stats_socket_level] %>
  stats socket <%= node[:haproxy][:stats_socket_path] %> level <%= node[:haproxy][:stats_socket_level] %>
  <% else %>
  stats socket <%= node[:haproxy][:stats_socket_path] %>
  <% end %>

defaults
  log             global
  mode            http
  option          httplog
  option          dontlognull
  retries         <%= node[:haproxy][:retries] %>
  option          redispatch
  maxconn        <%= node[:haproxy][:default_max_connections] %>
  timeout client <%= node[:haproxy][:client_timeout] %>             # Client and server timeout must match the longest
  timeout server <%= node[:haproxy][:server_timeout] %>             # time we may wait for a response from the server.
  timeout queue  <%= node[:haproxy][:queue_timeout] %>              # Don't queue requests too long if saturated.
  timeout connect <%= node[:haproxy][:connect_timeout] %>           # There's no reason to change this one.
  timeout http-request <%= node[:haproxy][:http_request_timeout] %>	# A complete request may never take that long.
  timeout tunnel 2h
  <% if node[:haproxy][:httpclose] %>
  option          httpclose                                         # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
  <% end %>
  <% if node[:haproxy][:http_server_close] %>
  option          http-server-close                                 # enable HTTP connection closing on the server side
  <% end %>
  option          abortonclose                                      # enable early dropping of aborted requests from pending queue
  option          httpchk                                           # enable HTTP protocol to check on servers health
  <% if node[:haproxy][:enable_stats] -%>
  stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
  stats uri <%= node[:haproxy][:stats_url] %>
  <% end -%>
  cookie AIOSERVERID insert indirect nocache

backend nodejs_app_servers
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  <% node[:haproxy][:nodejs_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> check-send-proxy send-proxy maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_nodejs_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>

backend nodejs_app_servers_websocket
  balance <%= node[:haproxy][:balance] %>
  timeout queue 5000
  timeout server 86400000
  timeout connect 86400000
  timeout check 1s
  option forwardfor
  no option httpclose
  option http-server-close
  option forceclose  
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  <% node[:haproxy][:nodejs_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> check-send-proxy send-proxy maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_nodejs_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>

backend nodejs_app_servers_mqtt
  mode tcp
  balance <%= node[:haproxy][:balance] %>
  <% node[:haproxy][:nodejs_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:1883 weight <%= backend['backends'] || 10 %> check-send-proxy send-proxy maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_nodejs_app] %>
  <% end -%>

frontend http-in
  bind :80 accept-proxy

  # At most 10 concurrent connections from a client
  acl too_fast fe_sess_rate ge 10
  tcp-request inspect-delay 1000ms
  tcp-request content accept unless too_fast
  tcp-request content accept if WAIT_END

  # all domains of node.js applications
  <% node[:haproxy][:nodejs_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl nodejs_websocket_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %> hdr_end(host) -i <%= domain %> hdr(Upgrade) -i WebSocket
  acl nodejs_application_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %> hdr_end(host) -i <%= domain %>
  acl nodejs_application_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %> path_beg /api /auth /connect /unlink
    <% end -%>
  <% end -%>


  <% node[:haproxy][:nodejs_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  use_backend nodejs_app_servers_websocket if nodejs_websocket_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %>
  use_backend nodejs_app_servers if nodejs_application_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %>
    <% end -%>
  <% end -%>

  default_backend nodejs_app_servers

frontend mqtt-in
  mode tcp
  bind :1883 accept-proxy

  default_backend nodejs_app_servers_mqtt
